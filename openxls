#! python3
# openxlsx.py - read all data from


import openpyxl, pprint, datetime
import template_programdetail

filename = 'Twintours 2018 Szingapur.xlsx'
#################################################################################
# Read all data from an excel                                                   #
#                                                                               #
# worksheets: List, containing all worksheet names in the excel                 #
# worksheet_headers: Dict, containig all header values in a list                #
# sheet_data: List of dict containing all rows data in the DB Worksheet         #
#################################################################################

wb = openpyxl.load_workbook(filename)
worksheets = wb.get_sheet_names()
#print('Name of worksheets', worksheets)
worksheet_headers = {}

for i in range(len(worksheets)):
    sheet = wb.get_sheet_by_name(worksheets[i])
    headers_for_sheet = []
    for column in range(0, sheet.max_column):
        title = sheet[chr(ord('A') + column) + str(1)].value
        headers_for_sheet.append(title)
        #print(headers_for_sheet)
    worksheet_headers[worksheets[i]] =headers_for_sheet
#print('HEADERS dict', worksheet_headers)


def get_how_many_rows(file_name, sheet_name):
    sheet = wb.get_sheet_by_name(sheet_name)

    for row in range(2, sheet.max_column + 1):
        if sheet['A' + str(row)].internal_value != None:
            max_number = row
            # print(max_number)
    return max_number

def collect_headers(file_name, sheet_name):
    wb = openpyxl.load_workbook(file_name)
    sheet = wb.get_sheet_by_name(sheet_name)
    #print('Sheet', sheet)

    headers = []

    for column in range(0, sheet.max_column):
        title = sheet[chr(ord('A') + column) + str(1)].value
        headers.append(title)
    return headers

def format_phone_number(phone_number):
    # TODO: Refactor to use regex (remove all '-', '=', '00'). Collect only numbers and add '+' to the 1st character)
    normalized_phone_number = phone_number[1:]
    return normalized_phone_number

def which_column(sheet_name, column_to_search):

    for i in range(len(worksheet_headers)):
        for x in range(len(worksheet_headers[sheet_name])):
            if worksheet_headers[sheet_name][x] == column_to_search:
                #print('NEW', worksheet_headers[sheet_name][x], chr(ord('A') + x))
                return chr(ord('A') + x)



def read_all_data(file_name, sheet_name):

    sheet = wb.get_sheet_by_name(sheet_name)
    sheet_data = []

    print('Reading rows...')
    # Reading header row
    header_array = collect_headers(file_name, sheet_name)
    max_row_number = get_how_many_rows(file_name, sheet_name)
    #print('rows= ', max_row_number)
    # print('rows= ', sheet.max_row)
    #print('columns= ', sheet.max_column)

    row_content = {}
    for row in range(2, max_row_number):
        for column in range(0, sheet.max_column):
            cell_value = sheet[chr(ord('A') + column) + str(row)].value
            row_content[header_array[column]] = cell_value
        sheet_data.append(row_content)
        print(row_content)

    print(sheet_data)

    # TODO: Open a new text file and write the contents of countyData to it.


def get_matching_rows_id_by_column(file_name, sheet_name, column_to_check, search_value):
    matching_column_id = []

    sheet = wb.get_sheet_by_name(sheet_name)
    max_row_number = get_how_many_rows(file_name, sheet_name)

    for row in range(2, max_row_number + 1):
        if search_value == sheet[column_to_check + str(row)].value:
            matching_column_id.append(row)
    return matching_column_id

def get_matching_rows_id_by_time_interval(file_name, sheet_name, column_to_check, interval):
    matching_column_id = []

    sheet = wb.get_sheet_by_name(sheet_name)
    max_row_number = get_how_many_rows(file_name, sheet_name)

    current_date = datetime.datetime.now()
    input_var = int(input("Enter how many days in the future (default = 7 days) : ") or interval)
    print(current_date)
    filter_end_date = current_date + datetime.timedelta(days=input_var)

    for row in range(2, max_row_number + 1):
        if current_date <= sheet[column_to_check + str(row)].value <= filter_end_date:
            matching_column_id.append(row)
    return matching_column_id

def get_all_programs_for_group(file_name, sheet_name, column_to_check, search_value, tour_lead_column, tour_leader):
    matching_column_id = []

    sheet = wb.get_sheet_by_name(sheet_name)
    max_row_number = get_how_many_rows(file_name, sheet_name)

    for row in range(2, max_row_number + 1):
        if (search_value == sheet[column_to_check + str(row)].value and tour_leader == sheet[tour_lead_column + str(row)].value):
            matching_column_id.append(row)
    return matching_column_id

def search_data_by_row(file_name, sheet_name, row_id):

    sheet = wb.get_sheet_by_name(sheet_name)
    row_content = {}
    search_result = []
    header_array = collect_headers(file_name, sheet_name)
    #print(header_array)

    if row_id:
        for i, row_id in enumerate(row_id):
            for column in range(0, sheet.max_column):
                cell_value = sheet[chr(ord('A') + column) + str(row_id)].value
                if header_array[column] == 'Phone number':
                    cell_value = format_phone_number(cell_value)
                row_content[header_array[column]] = cell_value
                #print(row_content)
            search_result.append(dict(row_content))
        #print(search_result)
        return search_result
    return False

def check_program_type(program_to_check):
    Program_name = program_to_check['Program']
    result_column = which_column('Programs', 'Short name')
    search_rows_id = get_matching_rows_id_by_column(filename,
                                                    'Programs', result_column, Program_name)
    program_result = search_data_by_row(filename, 'Programs',
                                        search_rows_id)
    result = program_result[0]['Type']
    #print(result)
    return result

def create_group_summary_message(programs):
    input_date = datetime.datetime.strptime('2017-05-13', '%Y-%m-%d')
    ##print(input_date, type(input_date))
    ##print(current_date)
    ##print(current_date - datetime.timedelta(days=3))
    ##target_date = datetime.date(2017, 4, 22)
    ##print('target date', target_date, type(target_date))
    arrive_column = which_column('DB', 'Group arrival date')
    ##print(arrive_column, type(arrive_column))
    tour_lead_column = which_column('DB', 'Tour Leader contact')
    ##print(tour_lead_column, type(tour_lead_column))
    search_rows_id = get_all_programs_for_group(filename, 'DB', arrive_column, input_date, tour_lead_column, 'Josephine')
    ##print(search_rows_id)
    programs = search_data_by_row(filename, 'DB', search_rows_id)
    return template_programdetail.group_summary_message(programs)

def create_all_detail_messages(programs):
    c = ''
    #print(programs)
    for i in range(len(programs)):
        program_type = check_program_type(programs[i])
        if program_type == 'eat':
            param_program = programs[i]
            rest_result_column = which_column('Restaurants', 'Name')
            search_rows_id = get_matching_rows_id_by_column(filename, 'Restaurants', rest_result_column, programs[i]['Location'])

            param_restaurant = search_data_by_row(filename, 'Restaurants', search_rows_id)
            c += template_programdetail.eating_program_message(param_program, param_restaurant[0]) + '\n\n'
            #print("Fassssskarika: ",template_programdetail.eating_program_message(param_program, param_restaurant[0]))
        elif program_type == 'sightseeing':
            param_program = programs[i]

            result_column = which_column('Idegenvezetok', 'Short name')
            search_rows_id = get_matching_rows_id_by_column(filename, 'Idegenvezetok', result_column, programs[i]['IdVez'])
            param_idvez = search_data_by_row(filename, 'Idegenvezetok', search_rows_id)

            result_column = which_column('Programs', 'Short name')
            search_rows_id = get_matching_rows_id_by_column(filename, 'Programs', result_column, programs[i]['Program'])
            param_program_detail = search_data_by_row(filename, 'Programs', search_rows_id)
            c += template_programdetail.sigthseeing_program_message(param_program, param_idvez[0], param_program_detail[0]) + '\n\n'
            #print("Maeradafaa: ", template_programdetail.sigthseeing_program_message(param_program, param_idvez[0], param_program_detail[0]))
    return c


# TODO: Search Tour Leader contact details
#result_column = which_column(filename, 'Turakiserok', 'Short name')
#search_rows_id = get_matching_rows_id_by_column(filename, 'Turakiserok', result_column, 'Sam')
#result = search_data_by_row(filename, 'Turakiserok', search_rows_id)
#print(result)

# TODO: Search Idegenvezetok contact details
#result_column = which_column(filename, 'Idegenvezetok', 'Short name')
#search_rows_id = get_matching_rows_id_by_column(filename, 'Idegenvezetok', result_column, 'Ancsi')
#result = search_data_by_row(filename, 'Idegenvezetok', search_rows_id)
#print(result)

# TODO: Search Program details
#result_column = which_column(filename, 'Programs', 'Short name')
#search_rows_id = get_matching_rows_id_by_column(filename, 'Programs', result_column, '3h Budapest Sightseeing')
#result = search_data_by_row(filename, 'Programs', search_rows_id)
#print(result)

# TODO: Search Restaurant details
#result_column = which_column(filename, 'Restaurants', 'Name')
#search_rows_id = get_matching_rows_id_by_column(filename, 'Restaurants', result_column, 'Inyenckert')
#result = search_data_by_row(filename, 'Restaurants', search_rows_id)
#print(result)

# TODO: Decide which kind of program
#check_program_type

# TODO: Read all data from a sheet
#read_all_data(filename,'Programs')

# TODO: Collect all matching rows for a Tour Lead
#result_column = which_column(filename, 'DB', 'Tour Leader contact')
#search_rows_id = get_matching_rows_id_by_column(filename, 'DB', result_column, 'Sam')
#result = search_data_by_row(filename, 'DB', search_rows_id)
#print(result)

# TODO: Collect all programs for a group (arrival date as input)
##current_date = datetime.datetime.now()
#input_var = input("Enter date (2017-04-22): ")
#input_date = datetime.datetime.strptime(input_var, '%Y-%m-%d')
input_date = datetime.datetime.strptime('2017-05-13', '%Y-%m-%d')
##print(input_date, type(input_date))
##print(current_date)
##print(current_date - datetime.timedelta(days=3))
##target_date = datetime.date(2017, 4, 22)
##print('target date', target_date, type(target_date))
arrive_column = which_column('DB', 'Group arrival date')
##print(arrive_column, type(arrive_column))
tour_lead_column = which_column('DB', 'Tour Leader contact')
##print(tour_lead_column, type(tour_lead_column))
search_rows_id = get_all_programs_for_group(filename, 'DB', arrive_column, input_date, tour_lead_column, 'Josephine')
##print(search_rows_id)
result = search_data_by_row(filename, 'DB', search_rows_id)
#print(result)

# TODO: Create messages
    # TODO: Collect all programs for a group (arrival date as input)
    # TODO: Create group summary message
elso = create_group_summary_message(result)
print(elso)
    # TODO: Create detail messages for all programs
mail_content = str(elso) + '\n' + str(create_all_detail_messages(result))
print(mail_content)


#check_program_type({'Group departure date': datetime.datetime(2017, 4, 23, 0, 0), 'Menu': None, 'Location': 'Heroes', 'No. of tour leader': 2.0, 'GroupId': None, 'Arrive from': 'Wien', 'Program Start Time': datetime.time(9, 15), 'Going to': 'Krakkow', 'Program Date': datetime.datetime(2017, 4, 23, 0, 0), 'IdVez': 'Ancsi', 'Tour Leader contact': 'Sam', 'Pax': 23.0, 'Program Finish Time': datetime.time(12, 15), 'Hotel': 'Novotel', 'Company': 'EU Holidays', 'Group arrival date': datetime.datetime(2017, 4, 22, 0, 0), 'Program': '3h Budapest Sightseeing'})


# TODO: Create sightseeing program message
#import template_programdetail
#param_program = {'Program Start Time': datetime.time(9, 15), 'Pax': 23.0, 'Location': 'Heroes', 'Program Date': datetime.datetime(2017, 4, 23, 0, 0), 'GroupId': None, 'Group arrival date': datetime.datetime(2017, 4, 22, 0, 0), 'IdVez': 'Ancsi', 'Going to': 'Krakkow', 'Program Finish Time': datetime.time(12, 15), 'No. of tour leader': 2.0, 'Program': '3h Budapest Sightseeing', 'Menu': None, 'Arrive from': 'Wien', 'Hotel': 'Novotel', 'Company': 'EU Holidays', 'Group departure date': datetime.datetime(2017, 4, 23, 0, 0), 'Tour Leader contact': 'Sam'}
#param_idvez = {'Phone number': '+36203402594', 'Preferred app': 'whatsapp', 'Name': 'Valami Ancsi', None: None, 'Short name': 'Ancsi'}
#param_program_detail = {'Length': '3h', 'Start location': "Heroe's Square", 'Short name': '3h Budapest Sightseeing', 'End location': 'TBD', 'Full name': '3h, Budapest Sightseeing', 'Details': "Heroe's Square - Andrassy Ave. - Basilica - Parliament - Castle", 'Location': None}
#template_programdetail.sigthseeing_program_message(param_program, param_idvez, param_program_detail)

# TODO: Create eating program message
#import template_programdetail
#param_program = {'GroupId': None, 'Pax': 23.0, 'Program': 'Folklor Dinner, Inyenckert', 'IdVez': None, 'Group departure date': datetime.datetime(2017, 4, 23, 0, 0), 'Group arrival date': datetime.datetime(2017, 4, 22, 0, 0), 'Tour Leader contact': 'Sam', 'Program Finish Time': datetime.time(22, 0), 'Going to': 'Krakkow', 'Location': 'Inyenckert', 'Program Date': datetime.datetime(2017, 4, 22, 0, 0), 'Hotel': 'Novotel', 'Program Start Time': datetime.time(19, 30), 'Menu': '22 Duck leg;3 Vegetarian', 'Arrive from': 'Wien', 'No. of tour leader': 2.0, 'Company': 'EU Holidays'}
#param_restaurant = {'Name': 'Inyenckert', 'Menu2 main course': 'Duck leg', 'Menu1 main course': 'Duck leg', 'Menu2 short name': 'Vegetarian', 'Menu1 1st course': 'Beef Gulas', 'Menu2 1st course': 'Vegetable soup', 'Web': 'http://inyenckert.hu/en/contact/', 'Address': 'Budapest, III.dist. Vörösvári út 131.', 'Menu1 short name': 'Duck leg', 'Phone number': '+36304761316'}
#template_programdetail.eating_program_message(param_program, param_restaurant)


# TODO: Collect upcoming groups in X days
#current_date = datetime.datetime.now()
#input_var = int(input("Enter how many days in the future (default = 7 days) : ") or "7")
#print(current_date)
#print(current_date + datetime.timedelta(days=input_var))
#arrive_date_column = which_column(filename, 'DB', 'Group arrival date')
#print(arrive_date_column)
#search_rows_id = get_matching_rows_id_by_time_interval(filename, 'DB', arrive_date_column, 7)
#print(search_rows_id)
#result = search_data_by_row(filename, 'DB', search_rows_id)
#print(result)

# TODO: Send SMS
# import sendMessage
# sendMessage.sendSMS('+36302873304','Szia Mano! Tudok kuldeni fasza SMSt mar a szamitogeprol! :)')

# TODO: Send Whatsapp
#import runpy
#runpy.send_message(36209849140, 'Faszom')

# TODO: Fill summary template mail
#import mail
#mail.send_mail('Proba', mail_content)
